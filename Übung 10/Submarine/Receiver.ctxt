#BlueJ class context
comment0.params=channel\ bufferSize
comment0.target=Receiver(java.nio.channels.SocketChannel,\ int)
comment0.text=\r\n\ Erzeugt\ ein\ neues\ Objekt\ zum\ Empfangen\ von\ Daten.\r\n\ @param\ channel\ Der\ Kanal,\ auf\ dem\ die\ Daten\ empfangen\ werden.\r\n\ @param\ bufferSize\ Die\ Gr\u00F6\u00DFe\ des\ Puffers,\ der\ zum\ Empfangen\ genutzt\ wird.\r\n\ \ \ \ \ \ \ \ \ \ \ \ \ \ \ \ \ \ \ Diese\ muss\ mindestens\ so\ gew\u00E4hlt\ werden,\ dass\ alle\r\n\ \ \ \ \ \ \ \ \ \ \ \ \ \ \ \ \ \ \ Daten\ zwischen\ zwei\ Zeilenvorsch\u00FCben\ in\ den\ Puffer\ passen.\ \r\n\ \ \ \ \ \ \ \ \ \ \ \ \ \ \ \ \ \ \ Besser\ ist\ es\ allerdings,\ wenn\ alle\ Daten\ eines\ \r\n\ \ \ \ \ \ \ \ \ \ \ \ \ \ \ \ \ \ \ Kommunikationszyklus\ in\ den\ Puffer\ passen\ (z.B.\ 10000).\r\n\ @throws\ IOException\ Ein\ Problem\ beim\ Wechsel\ in\ den\ nicht-blockierenden\r\n\ \ \ \ \ \ \ \ \ \ \ \ \ \ \ \ \ \ \ \ \ Modus\ ist\ aufgetreten.\r\n
comment1.params=
comment1.target=java.util.Scanner\ receive()
comment1.text=\r\n\ Testet,\ ob\ Daten\ zum\ Empfang\ bereitstehen\ und\ liefert\ diese\ in\ Form\ eines\r\n\ Scanners.\ Es\ werden\ immer\ nur\ Daten\ bis\ einschlie\u00DFlich\ des\ letzten\r\n\ Zeilenvorschubs\ geliefert.\ Wenn\ man\ Informationseinheiten\ beim\ Senden\r\n\ mit\ Zeilenvorsch\u00FCben\ abschlie\u00DFt,\ sie\ aber\ selbst\ keinen\ enthalten,\ kann\ man\r\n\ davon\ ausgehen,\ dass\ diese\ nur\ vollst\u00E4ndig\ geliefert\ werden.\r\n\ @return\ Einen\ Scanner,\ wenn\ Daten\ empfangen\ wurden.\ \u00DCber\ den\ Scanner\ k\u00F6nnen\r\n\ \ \ \ \ \ \ \ \ die\ Daten\ gelesen\ werden.\ null,\ wenn\ keine\ neuen\ Daten\ vorhanden\r\n\ \ \ \ \ \ \ \ \ sind.\r\n\ @throws\ IOException\ Beim\ Lesen\ ist\ ein\ Fehler\ aufgetreten.\r\n
numComments=2
