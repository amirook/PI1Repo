#BlueJ class context
comment0.params=
comment0.target=Submarine()
comment0.text=\r\n\ Konstruktor\ des\ U-Bootes.\ Kreiirt\ jeweils\ einen\ RingBuffer\ f\u00FCr\ die\ X\ und\ Y\ Positionen\ und\ \r\n\ f\u00FCr\ die\ Roation.\r\n
comment1.params=scoreBoard
comment1.target=void\ setScoreBoard(ScoreBoard)
comment1.text=\r\n\ Ordnet\ dem\ U-Boot\ einen\ Punktez\u00E4hler\ zu\r\n\ @param\ scoreBoard\ Punktez\u00E4hler,\ der\ dem\ U-Boot\ zugeordnet\ werden\ soll.\r\n
comment10.params=
comment10.target=void\ setImageDependingOnRotation()
comment10.text=\r\n\ erfasst\ den\ momentanen\ winkel\ dieses\ Aktors\ und\ setzt\ dazu\ das\ passende\ Bild\r\n
comment11.params=
comment11.target=void\ randomlyBlowBubbles()
comment11.text=\r\n\ Das\ Uboot\ erzeugt\ in\ Zufallsintervallen\ Luftblasen\r\n
comment2.params=
comment2.target=ScoreBoard\ getScoreBoard()
comment2.text=\r\n\ Liefert\ den\ Punktez\u00E4hler\ des\ U-Bootes\ zur\u00FCck\r\n\ @return\ Das\ ScoreBoard\ des\ U-Bootes.\r\n
comment3.params=inventory
comment3.target=void\ setInventory(Inventory)
comment3.text=\r\n\ Ordnet\ dem\ U-Boot\ ein\ Inventar\ zu\r\n\ @param\ inventory\ Inventar,\ das\ dem\ U-Boot\ zugeordnet\ werden\ soll.\r\n
comment4.params=
comment4.target=Inventory\ getInventory()
comment4.text=\r\n\ Liefert\ das\ Inventar\ des\ U-Bootes\ zur\u00FCck\r\n\ \r\n\ @return\ Das\ Inventar\ des\ U-Bootes.\r\n
comment5.params=
comment5.target=void\ act()
comment5.text=\r\n\ Diese\ Methode\ wird\ aufgerufen,\ wenn\ die\ 'Act'-\ oder\ 'Run'-Kn\u00F6pfe\ in\ der\ Umgebung\ gedr\u00FCckt\ werden.\r\n\ Das\ U-Boot\ muss\ nichts\ weiter\ tun,\ als\ zu\ pr\u00FCfen\ welche\ Tasten\ gedr\u00FCckt\ sind\ und\ sich\ dementsprechend\ verhalten.\r\n
comment6.params=
comment6.target=void\ processKeys()
comment6.text=\r\n\ Pr\u00FCft,\ ob\ Tasten\ gedr\u00FCckt\ werden\ und\ reagiert\ entsprechend.\r\n
comment7.params=
comment7.target=void\ bufferSubmarine()
comment7.text=\r\n\ Tr\u00E4gt\ den\ aktuellen\ Zustand\ des\ U-Bootes\ in\ den\ RingBuffer\ ein.\r\n
comment8.params=
comment8.target=void\ checkCollisions()
comment8.text=\r\n\ Pr\u00FCft,\ ob\ das\ U-Boot\ mit\ einem\ Hindernis\ kollidiert.\ Falls\ eine\ Kollision\ existiert,\ wird\r\n\ der\ Crash\ Handler\ des\ Objekts\ aufgerufen.\r\n
comment9.params=
comment9.target=void\ takeOrFreeCollectable()
comment9.text=\r\n\ Wenn\ ein\ Collectable\ in\ der\ N\u00E4he\ und\ das\ Inventar\ leer\ ist,\ wird\ das\ Collectable\ eingesammelt.\r\n\ Beindet\ sich\ ein\ Actor\ im\ Inventar,\ wird\ dieser\ an\ der\ aktuellen\ Position\ des\ U-Bootes\ in\ die\r\n\ Welt\ gesetzt.\ Andernfalls\ wird\ der\ Fehlerton\ abgespielt.\r\n
numComments=12
